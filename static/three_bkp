<!-- <template>
  <div class="h-full w-full">
    <h1>Three js page</h1>
    <div class="h-full w-full" ref="container"></div>
  </div>
</template>

<script>
import * as THREE from "three";
// import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";

export default {
  name: "ThreePage",
  auth: false,
  data() {
    return {
      camera: null,
      scene: null,
      renderer: null,
      isUserInteracting: false,
      onPointerDownMouseX: 0,
      onPointerDownMouseY: 0,
      lon: 0,
      onPointerDownLon: 0,
      lat: 0,
      onPointerDownLat: 0,
      phi: 0,
      theta: 0,
    };
  },
  mounted() {
    this.init();
    this.animate();
  },
  methods: {
    init() {
      const container = this.$refs.container;

      this.camera = new THREE.PerspectiveCamera(
        75,
        window.innerWidth / window.innerHeight,
        1,
        1100
      );
      this.camera.position.set(0, 0, 0);
      this.scene = new THREE.Scene();

      const geometry = new THREE.SphereGeometry(500, 60, 40);
      geometry.scale(-1, 1, 1);

      const texture = new THREE.TextureLoader().load("/360.jpg");
      texture.encoding = THREE.sRGBEncoding;
      const material = new THREE.MeshBasicMaterial({ map: texture });

      const mesh = new THREE.Mesh(geometry, material);
      this.scene.add(mesh);

      this.renderer = new THREE.WebGLRenderer();
      this.renderer.setPixelRatio(window.devicePixelRatio);
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      container.appendChild(this.renderer.domElement);

      container.style.touchAction = "none";
      container.addEventListener("pointerdown", this.onPointerDown);

      window.addEventListener("resize", this.onWindowResize);
    },
    onWindowResize() {
      this.camera.aspect = window.innerWidth / window.innerHeight;
      this.camera.updateProjectionMatrix();
      this.renderer.setSize(window.innerWidth, window.innerHeight);
    },
    onPointerDown(event) {
      if (event.isPrimary === false) return;

      this.isUserInteracting = true;

      this.onPointerDownMouseX = event.clientX;
      this.onPointerDownMouseY = event.clientY;

      this.onPointerDownLon = this.lon;
      this.onPointerDownLat = this.lat;

      document.addEventListener("pointermove", this.onPointerMove);
      document.addEventListener("pointerup", this.onPointerUp);
    },
    onPointerMove(event) {
      if (event.isPrimary === false) return;

      this.lon =
        (this.onPointerDownMouseX - event.clientX) * 0.1 +
        this.onPointerDownLon;
      this.lat =
        (event.clientY - this.onPointerDownMouseY) * 0.1 +
        this.onPointerDownLat;
    },
    onPointerUp() {
      if (event.isPrimary === false) return;

      this.isUserInteracting = false;

      document.removeEventListener("pointermove", this.onPointerMove);
      document.removeEventListener("pointerup", this.onPointerUp);
    },
    animate() {
      requestAnimationFrame(this.animate);
      this.update();
      if (this.isUserInteracting) {
        this.$refs.container.style.cursor = "grabbing";
      } else {
        this.$refs.container.style.cursor = "auto";
      }
    },
    update() {
      this.lat = Math.max(-85, Math.min(85, this.lat));
      this.phi = THREE.MathUtils.degToRad(90 - this.lat);
      this.theta = THREE.MathUtils.degToRad(this.lon);

      const x = 500 * Math.sin(this.phi) * Math.cos(this.theta);
      const y = 500 * Math.cos(this.phi);
      const z = 500 * Math.sin(this.phi) * Math.sin(this.theta);

      this.camera.lookAt(x, y, z);
      this.renderer.render(this.scene, this.camera);
    },
  },
};
</script> -->
